name: Pre-submit tests

on:
  workflow_dispatch:
    inputs:
      platforms:
        description: "Platform(s) to execute on"
        required: true
        default: "Windows x64"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  prerequisites:
    name: Prerequisites
    runs-on: "ubuntu-20.04"
    outputs:
      should_run: ${{ steps.check_submit.outputs.should_run }}
      bundle_id: ${{ steps.check_bundle_id.outputs.bundle_id }}
      platform_windows_x64: ${{ steps.check_platforms.outputs.platform_windows_x64 }}
      dependencies: ${{ steps.check_deps.outputs.dependencies }}

    steps:
      - name: Check if submit tests should actually run depending on secrets and manual triggering
        id: check_submit
        run: echo "should_run=${{ github.event.inputs.platforms != '' || (!secrets.JDK_SUBMIT_FILTER || startsWith(github.ref, 'refs/heads/submit/')) }}" >> $GITHUB_OUTPUT

      - name: Check which platforms should be included
        id: check_platforms
        run: |
          echo "platform_windows_x64=${{ contains(github.event.inputs.platforms, 'windows x64') || (github.event.inputs.platforms == '' && (secrets.JDK_SUBMIT_PLATFORMS == '' || contains(secrets.JDK_SUBMIT_PLATFORMS, 'windows x64'))) }}" >> $GITHUB_OUTPUT
        if: steps.check_submit.outputs.should_run != 'false'

      - name: Determine unique bundle identifier
        id: check_bundle_id
        run: echo "bundle_id=${GITHUB_ACTOR}_${GITHUB_SHA:0:8}" >> $GITHUB_OUTPUT
        if: steps.check_submit.outputs.should_run != 'false'

      - name: Checkout the source
        uses: actions/checkout@v4
        with:
          path: jdk
        if: steps.check_submit.outputs.should_run != 'false'

      - name: Determine versions and locations to be used for dependencies
        id: check_deps
        run: "echo dependencies=`cat common/autoconf/version-numbers make/conf/test-dependencies | sed -e '1i {' -e 's/#.*//g' -e 's/\"//g' -e 's/\\(.*\\)=\\(.*\\)/\"\\1\": \"\\2\",/g' -e '$s/,\\s\\{0,\\}$/\\}/'` >> $GITHUB_OUTPUT"
        working-directory: jdk
        if: steps.check_submit.outputs.should_run != 'false'

      - name: Print extracted dependencies to the log
        run: "echo '${{ steps.check_deps.outputs.dependencies }}'"
        if: steps.check_submit.outputs.should_run != 'false'

      - name: Determine the jtreg ref to checkout
        run: "echo JTREG_REF=jtreg${{ fromJson(steps.check_deps.outputs.dependencies).JTREG_VERSION }}-${{ fromJson(steps.check_deps.outputs.dependencies).JTREG_BUILD }} >> $GITHUB_ENV"
        if: steps.check_submit.outputs.should_run != 'false'

      - name: Determine the jtreg version to build
        run: echo "BUILD_VERSION=${{ fromJson(steps.check_deps.outputs.dependencies).JTREG_VERSION }}" >> $GITHUB_ENV
        if: steps.check_submit.outputs.should_run != 'false'

      - name: Determine the jtreg build number to build
        run: echo "BUILD_NUMBER=${{ fromJson(steps.check_deps.outputs.dependencies).JTREG_BUILD }}" >> $GITHUB_ENV
        if: steps.check_submit.outputs.should_run != 'false'

      - name: Check if a jtreg image is present in the cache
        id: jtreg
        uses: actions/cache@v4
        with:
          path: ~/jtreg/
          key: jtreg-${{ env.JTREG_REF }}-v1
        if: steps.check_submit.outputs.should_run != 'false'

      - name: Checkout the jtreg source
        uses: actions/checkout@v4
        with:
          repository: "openjdk/jtreg"
          ref: ${{ env.JTREG_REF }}
          path: jtreg
        if: steps.check_submit.outputs.should_run != 'false' && steps.jtreg.outputs.cache-hit != 'true'

      - name: Build jtreg
        run: bash make/build-all.sh ${JAVA_HOME_8_X64}
        working-directory: jtreg
        if: steps.check_submit.outputs.should_run != 'false' && steps.jtreg.outputs.cache-hit != 'true'

      - name: Move jtreg image to destination folder
        run: mv build/images/jtreg ~/
        working-directory: jtreg
        if: steps.check_submit.outputs.should_run != 'false' && steps.jtreg.outputs.cache-hit != 'true'

      - name: Store jtreg for use by later steps
        uses: actions/upload-artifact@v4
        with:
          name: transient_jtreg_${{ steps.check_bundle_id.outputs.bundle_id }}
          path: ~/jtreg/
        if: steps.check_submit.outputs.should_run != 'false'

  windows_x64_build:
    name: Windows x64
    runs-on: "windows-2019"
    needs: prerequisites
    if: needs.prerequisites.outputs.should_run != 'false' && needs.prerequisites.outputs.platform_windows_x64 != 'false'

    strategy:
      fail-fast: false
      matrix:
        flavor:
          - build release

    env:
      JDK_VERSION: "${{ fromJson(needs.prerequisites.outputs.dependencies).JDK_MAJOR_VERSION }}.${{ fromJson(needs.prerequisites.outputs.dependencies).JDK_MINOR_VERSION }}.${{ fromJson(needs.prerequisites.outputs.dependencies).JDK_MICRO_VERSION }}"
      BOOT_JDK_VERSION: "${{ fromJson(needs.prerequisites.outputs.dependencies).BOOT_JDK_VERSION }}"
      BOOT_JDK_FILENAME: "${{ fromJson(needs.prerequisites.outputs.dependencies).WINDOWS_X64_BOOT_JDK_FILENAME }}"
      BOOT_JDK_URL: "${{ fromJson(needs.prerequisites.outputs.dependencies).WINDOWS_X64_BOOT_JDK_URL }}"
      BOOT_JDK_SHA256: "${{ fromJson(needs.prerequisites.outputs.dependencies).WINDOWS_X64_BOOT_JDK_SHA256 }}"
      VS2017_FILENAME: "${{ fromJson(needs.prerequisites.outputs.dependencies).VS2017_FILENAME }}"
      VS2017_URL: "${{ fromJson(needs.prerequisites.outputs.dependencies).VS2017_URL }}"
      VS2017_SHA256: "${{ fromJson(needs.prerequisites.outputs.dependencies).VS2017_SHA256 }}"

    steps:
      - name: Restore cygwin installer from cache
        id: cygwin-installer
        uses: actions/cache@v4
        with:
          path: ~/cygwin/setup-x86_64.exe
          key: cygwin-installer

      - name: Download cygwin installer
        run: |
          New-Item -Force -ItemType directory -Path "$HOME\cygwin"
          & curl -L "https://www.cygwin.com/setup-x86_64.exe" -o "$HOME/cygwin/setup-x86_64.exe"
        if: steps.cygwin-installer.outputs.cache-hit != 'true'

      - name: Restore cygwin packages from cache
        id: cygwin
        uses: actions/cache@v4
        with:
          path: ~/cygwin/packages
          key: cygwin-packages-${{ runner.os }}-v1

      - name: Install cygwin
        run: |
          Start-Process -FilePath "$HOME\cygwin\setup-x86_64.exe" -ArgumentList "--quiet-mode --packages autoconf,make,zip,unzip --root $HOME\cygwin\cygwin64 --local-package-dir $HOME\cygwin\packages --site http://mirrors.kernel.org/sourceware/cygwin --no-desktop --no-shortcuts --no-startmenu --no-admin" -Wait -NoNewWindow

      - name: Checkout the source
        uses: actions/checkout@v4
        with:
          path: jdk

      - name: Checkout the FreeType source
        uses: actions/checkout@v4
        with:
          repository: "freetype/freetype"
          ref: VER-2-8-1
          path: freetype

      - name: Restore boot JDK from cache
        id: bootjdk
        uses: actions/cache@v4
        with:
          path: ~/bootjdk/${{ env.BOOT_JDK_VERSION }}
          key: bootjdk-${{ runner.os }}-${{ env.BOOT_JDK_VERSION }}-${{ env.BOOT_JDK_SHA256 }}-v1

      - name: Download boot JDK
        run: |
          mkdir -p "$HOME\bootjdk\$env:BOOT_JDK_VERSION"
          & curl -L "$env:BOOT_JDK_URL" -o "$HOME/bootjdk/$env:BOOT_JDK_FILENAME"
          $FileHash = Get-FileHash -Algorithm SHA256 "$HOME/bootjdk/$env:BOOT_JDK_FILENAME"
          $FileHash.Hash -eq $env:BOOT_JDK_SHA256
          & unzip "$HOME/bootjdk/$env:BOOT_JDK_FILENAME" -d "$HOME/bootjdk/$env:BOOT_JDK_VERSION"
          Get-ChildItem "$HOME\bootjdk\$env:BOOT_JDK_VERSION\*\*" | Move-Item -Destination "$HOME\bootjdk\$env:BOOT_JDK_VERSION"
        if: steps.bootjdk.outputs.cache-hit != 'true'

      - name: Restore Visual Studio 2017 from cache
        id: vs2017
        uses: actions/cache@v4
        with:
          path: ~/${{ env.VS2017_FILENAME }}
          key: vs2017

      - name: Restore jtreg artifact
        id: jtreg_restore
        uses: actions/download-artifact@v4
        with:
          name: transient_jtreg_${{ needs.prerequisites.outputs.bundle_id }}
          path: ~/jtreg/
        continue-on-error: true

      - name: Restore jtreg artifact (retry)
        uses: actions/download-artifact@v4
        with:
          name: transient_jtreg_${{ needs.prerequisites.outputs.bundle_id }}
          path: ~/jtreg/
        if: steps.jtreg_restore.outcome == 'failure'

      - name: Uninstall WinSDKs
        run: >
          Start-Process -FilePath 'C:\Program Files (x86)\Microsoft Visual Studio\Installer\vs_installer.exe' -Wait -NoNewWindow -ArgumentList
          'modify --installPath "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise"
          --remove Microsoft.VisualStudio.Component.Windows10SDK.18362
          --remove Microsoft.VisualStudio.Component.Windows10SDK.19041
          --remove Microsoft.VisualStudio.Component.Windows10SDK.20348
          --remove Microsoft.VisualStudio.Component.Windows10SDK.22000
          --quiet'

      - name: Download Visual Studio 2017
        run: |
          curl -L "$env:VS2017_URL" -o "$HOME/$env:VS2017_FILENAME"
        if: steps.vs2017.outputs.cache-hit != 'true'

      - name: Install Visual Studio 2017
        run: >
          Start-Process -FilePath "$HOME\$env:VS2017_FILENAME" -Wait -NoNewWindow -ArgumentList
          'install --productId Microsoft.VisualStudio.Product.Community --channelId VisualStudio.15.Release
          --add Microsoft.VisualStudio.Workload.NativeDesktop
          --add Microsoft.VisualStudio.Component.VC.Tools.x86.x64
          --add Microsoft.VisualStudio.Component.Windows10SDK.17763
          --quiet --wait'

      - name: Fix OpenJDK permissions
        run: bash -c "chmod -R 0777 jdk"

      - name: Copy FreeType project file
        run: >
          Remove-Item "$env:GITHUB_WORKSPACE\freetype\builds\windows\vc2010\freetype.vcxproj" ;
          Copy-Item -Path "$env:GITHUB_WORKSPACE\jdk\.github\workflows\freetype.vcxproj"
          -Destination "$env:GITHUB_WORKSPACE\freetype\builds\windows\vc2010\freetype.vcxproj" ;

      - name: Configure
        run: >
          $env:Path = "$HOME\cygwin\cygwin64\bin;$HOME\cygwin\cygwin64\bin;$env:Path" ;
          $env:Path = $env:Path -split ";" -match "C:\\Windows|PowerShell|cygwin" -join ";" ;
          $env:BOOT_JDK = cygpath "$HOME/bootjdk/$env:BOOT_JDK_VERSION" ;
          $env:FREETYPE_HOME = "$env:GITHUB_WORKSPACE\freetype" ;
          $env:JT_HOME = cygpath "$HOME/jtreg" ;
          & bash configure
          --with-toolchain-version=2017
          --with-conf-name=windows-x64
          ${{ matrix.flags }}
          --with-user-release-suffix="$env:GITHUB_ACTOR-$env:GITHUB_SHA"
          --with-build-number=b00
          --with-boot-jdk="$env:BOOT_JDK"
          --with-freetype-src="$env:FREETYPE_HOME"
          --with-jtreg="$env:JT_HOME" ;
          bash -c "cat $(find -name config.log)"
        working-directory: jdk

      - name: Build
        run: |
          $env:Path = "$HOME\cygwin\cygwin64\bin;$HOME\cygwin\cygwin64\bin;$env:Path" ;
          $env:Path = $env:Path -split ";" -match "C:\\Windows|PowerShell|cygwin" -join ";" ;
          & make CONF_NAME=windows-x64 FORCE_MSC_VER=1912 FORCE_LD_VER=1412 images
        working-directory: jdk

      - name: Pack artifacts
        run: >
          dir ;
          $env:Path = "$HOME\cygwin\cygwin64\bin;$env:Path" ;
          zip -r9
          "${{ github.workspace }}/jdk-${{ env.JDK_VERSION }}-internal+0_windows-x64_bin${{ matrix.artifact }}.zip"
          j2sdk-image
        working-directory: jdk/build/windows-x64/images

      - name: Persist test bundles
        uses: actions/upload-artifact@v4
        with:
          name: transient_jdk-windows-x64${{ matrix.artifact }}_${{ needs.prerequisites.outputs.bundle_id }}
          path: |
            jdk-${{ env.JDK_VERSION }}-internal+0_windows-x64_bin${{ matrix.artifact }}.zip

  artifacts:
    name: Post-process artifacts
    runs-on: "ubuntu-20.04"
    if: always()
    continue-on-error: true
    needs:
      - prerequisites

    steps:
      - name: Display current artifacts
        run: |
          curl -sL \
              -H 'Accept: application/vnd.github+json' \
              -H 'Authorization: Bearer ${{ github.token }}' \
              -H 'X-GitHub-Api-Version: 2022-11-28' \
              '${{ github.api_url }}/repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts?per_page=100'

      - name: Upload a combined test results artifact
        uses: actions/upload-artifact/merge@v4
        with:
          name: test-results_${{ needs.prerequisites.outputs.bundle_id }}
          separate-directories: false
          delete-merged: true
